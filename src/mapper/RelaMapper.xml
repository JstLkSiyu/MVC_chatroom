<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="chat.dao.RelationDao">

    <resultMap id="userInfo_result_map" type="chat.entity.User">
        <id column="uid" property="uid" />
        <result column="uname" property="uname" />
        <result column="gender" property="gender" />
        <result column="birthday" property="birthday" />
    </resultMap>

    <!--获取收到的请求状态-->
    <resultMap id="got_request_map" type="chat.entity.FriendRequest">
        <id column="uid" property="from" />
        <result column="status" property="status" />
        <association property="user" javaType="chat.entity.User">
            <result column="uname" property="uname" />
            <result column="birthday" property="birthday" />
            <result column="gender" property="gender" />
        </association>
    </resultMap>

    <!--获取发送的请求状态-->
    <resultMap id="sent_request_map" type="chat.entity.FriendRequest">
        <id column="uid" property="to" />
        <result column="status" property="status" />
        <association property="user" javaType="chat.entity.User">
            <result column="uname" property="uname" />
            <result column="birthday" property="birthday" />
            <result column="gender" property="gender" />
        </association>
    </resultMap>

    <!--添加关系-->
    <insert id="addRelation">
        INSERT INTO relation
        VALUE(#{u1id}, #{u2id}, #{day})
    </insert>

    <!--删除关系-->
    <delete id="delRelation">
        DELETE FROM relation
        WHERE u1id=#{u1id} AND u2id=#{u2id}
    </delete>

    <!--查询所有好友信息-->
    <select id="queryRelationOfUid" resultMap="userInfo_result_map">
        SELECT uid, uname, birthday, gender
        FROM users
        WHERE EXISTS
        (SELECT * FROM relation
        WHERE (u1id = users.uid AND u2id = #{uid})
        OR (u1id = #{uid} AND u2id = users.uid))
    </select>

    <!--添加一条临时好友请求-->
    <insert id="pushFriendRequest">
        INSERT INTO friend_request
        VALUE(#{from}, #{to}, "incomplete")
    </insert>

    <!--根据被请求ID获取所有好友请求-->
    <select id="getFriendRequestByToUid" resultMap="got_request_map">
        SELECT uname, status, uid, gender, birthday
        FROM friend_request, users
        WHERE friend_request.`from` = users.uid
        AND `to` = #{uid}
    </select>

    <!--查看用户发出的好友请求-->
    <select id="getFriendRequestByFromUid" resultMap="sent_request_map">
        SELECT uname, status, uid, gender, birthday
        FROM friend_request, users
        WHERE friend_request.`to` = users.uid
        AND `from` = #{uid}
    </select>

    <!--删除 from 对 to 的好友请求记录-->
    <delete id="popFriendRequest">
        DELETE FROM friend_request
        WHERE `from`=#{from} AND `to`=#{to}
    </delete>

    <!--双向删除好友请求记录-->
    <delete id="popBothFriendRequest">
        DELETE FROM friend_request
        WHERE (`from`=#{u1id} AND `to`=#{u2id})
        OR (`from`=#{u2id} AND `to`=#{u1id})
    </delete>

    <!--将请求记录的状态从未处理转化为同意或拒绝-->
    <update id="changeStatus">
        UPDATE friend_request
        SET status = #{status}
        WHERE `from` = #{from} AND `to` = #{to}
    </update>

</mapper>